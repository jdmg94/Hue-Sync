import type { Room, Zone, Light, Scene, Device, LightGroup, HomeArea, ResourceNode, BridgeConfig, HueBridgeArgs, GeoFenceClient, BehaviourInstance, EntertainmentArea, HueBridgeNetworkDevice, BridgeClientCredentials } from "./hue.types";
export default class HueBridge {
    static discover(): Promise<HueBridgeNetworkDevice[]>;
    static register(url: string, devicetype?: string): Promise<BridgeClientCredentials>;
    id: string;
    url: string;
    private socket;
    private abortionController;
    private entertainmentArea;
    private credentials;
    constructor(initial: HueBridgeArgs);
    private _request;
    private _unwrap;
    start(selectedArea: EntertainmentArea, timeout?: number): Promise<void>;
    stop(): void;
    transition(colors: number[][]): void;
    addScene(data: Pick<Scene, "metadata" | "group" | "actions">): Promise<ResourceNode>;
    addRoom(data: Pick<Room, "metadata" | "children">): Promise<ResourceNode>;
    addZone(data: Pick<Zone, "metadata" | "children">): Promise<ResourceNode>;
    addEntertainmentArea(data: Pick<EntertainmentArea, "metadata" | "configuration_type" | "locations">): Promise<ResourceNode>;
    addGeoFenceClient(data: Pick<GeoFenceClient, "name" | "is_at_home" | "type">): Promise<ResourceNode>;
    addBehaviorInstance(data: Pick<BehaviourInstance, "type" | "metadata" | "configuration" | "enabled" | "script_id" | "migrated_from">): Promise<ResourceNode>;
    getInfo(): Promise<BridgeConfig>;
    getLights(): Promise<Light[]>;
    getLight(id: string): Promise<Light>;
    getLightGroups(): Promise<LightGroup[]>;
    getLightGroup(id: string): Promise<LightGroup>;
    getScenes(): Promise<Scene[]>;
    getScene(id: string): Promise<Scene>;
    getRooms(): Promise<Room[]>;
    getRoom(id: string): Promise<Room>;
    getZones(): Promise<Zone[]>;
    getZone(id: string): Promise<Zone>;
    getEntertainmentAreas(): Promise<EntertainmentArea[]>;
    getEntertainmentArea(id: string): Promise<EntertainmentArea>;
    getHomeAreas(): Promise<HomeArea[]>;
    getHomeArea(id: string): Promise<HomeArea>;
    getDevices(): Promise<Device[]>;
    getDevice(id: string): Promise<Device>;
    getAllGeoFenceClients(): Promise<GeoFenceClient[]>;
    getGeoFenceClient(id: string): Promise<GeoFenceClient>;
    getAllBehaviorInstances(): Promise<BehaviourInstance[]>;
    getBehaviorInstance(id: string): Promise<BehaviourInstance>;
    updateEntertainmentArea(id: string, updates: Partial<EntertainmentArea> & {
        action: string;
    }): Promise<ResourceNode>;
    updateLight(id: string, updates: Partial<Light>): Promise<ResourceNode>;
    updateScene(id: string, updates: Partial<Scene>): Promise<ResourceNode>;
    updateRoom(id: string, updates: Partial<Room>): Promise<ResourceNode>;
    updateZone(id: string, updates: Partial<Zone>): Promise<ResourceNode>;
    updateHomeArea(id: string, updates: Partial<HomeArea>): Promise<ResourceNode>;
    updateLightGroup(id: string, updates: Partial<LightGroup>): Promise<ResourceNode>;
    updateDevice(id: string, updates: Partial<Device>): Promise<ResourceNode>;
    updateBehaviorInstance(id: string, updates: Partial<BehaviourInstance>): Promise<ResourceNode>;
    updateGeoFenceClient(id: string, updates: Partial<GeoFenceClient>): Promise<ResourceNode>;
    removeScene(id: string): Promise<ResourceNode>;
    removeRoom(id: string): Promise<ResourceNode>;
    removeZone(id: string): Promise<ResourceNode>;
    removeBehaviorInstance(id: string): Promise<ResourceNode>;
    removeGeoFenceClient(id: string): Promise<ResourceNode>;
    removeEntertainmentArea(id: string): Promise<ResourceNode>;
}
